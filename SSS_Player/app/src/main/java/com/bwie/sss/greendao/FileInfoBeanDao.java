package com.bwie.sss.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bwie.sss.bean.FileInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_INFO_BEAN".
*/
public class FileInfoBeanDao extends AbstractDao<FileInfoBean, Long> {

    public static final String TABLENAME = "FILE_INFO_BEAN";

    /**
     * Properties of entity FileInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "url");
        public final static Property Length = new Property(2, int.class, "length", false, "length");
        public final static Property Start = new Property(3, int.class, "start", false, "start");
        public final static Property Now = new Property(4, int.class, "now", false, "now");
    };


    public FileInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FileInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"url\" TEXT," + // 1: url
                "\"length\" INTEGER NOT NULL ," + // 2: length
                "\"start\" INTEGER NOT NULL ," + // 3: start
                "\"now\" INTEGER NOT NULL );"); // 4: now
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getLength());
        stmt.bindLong(4, entity.getStart());
        stmt.bindLong(5, entity.getNow());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getLength());
        stmt.bindLong(4, entity.getStart());
        stmt.bindLong(5, entity.getNow());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FileInfoBean readEntity(Cursor cursor, int offset) {
        FileInfoBean entity = new FileInfoBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.getInt(offset + 2), // length
            cursor.getInt(offset + 3), // start
            cursor.getInt(offset + 4) // now
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileInfoBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLength(cursor.getInt(offset + 2));
        entity.setStart(cursor.getInt(offset + 3));
        entity.setNow(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
